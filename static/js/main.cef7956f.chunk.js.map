{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","handleKeyPress","this","onSearch","e","setState","target","value","preventDefault","charCode","className","placeholder","type","onChange","onKeyPress","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","onClick","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","background","onNameChange","style","backgroundColor","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAAIA,E,kFCsDWC,G,8DAlDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBATP,E,qDAafG,KAAKP,MAAMQ,SAASD,KAAKN,MAAMC,Q,uCAGlBO,GAAI,IAAD,OAChBF,KAAKG,SACD,CAAER,KAAMO,EAAEE,OAAOC,QACjB,WACI,EAAKT,YAEbM,EAAEI,mB,qCAGSJ,GACQ,KAAfA,EAAEK,WACFP,KAAKP,MAAMG,OAAOI,KAAKN,MAAMC,MAC7BO,EAAEI,oB,+BAMN,OACI,qBAAKE,UAAU,YAAf,SACI,uBAAOC,YAAY,iCACXC,KAAK,OACLL,MAAOL,KAAKN,MAAMC,KAClBgB,SAAUX,KAAKF,iBACfc,WAAYZ,KAAKD,uB,GAzCjBc,IAAMC,YCoCfC,G,oEAnCX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDuB,SAAW,EAAKA,SAASnB,KAAd,gBAChB,EAAKoB,YAAc,EAAKA,YAAYpB,KAAjB,gBAHJ,E,uDAOfG,KAAKP,MAAMyB,MAAMlB,KAAKP,MAAM0B,S,oCAI7BnB,KAAKP,MAAM2B,SAASpB,KAAKP,MAAM0B,S,qCAI9B,OAA6B,IAAzBnB,KAAKP,MAAM4B,UACJ,wBAAQb,UAAU,eAAec,QAAStB,KAAKiB,YAA/C,eAEA,wBAAQT,UAAU,eAAec,QAAStB,KAAKgB,SAA/C,iB,+BAKX,OACI,sBAAKR,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,6BAAKR,KAAKP,MAAM0B,MAAMI,OACtB,8BAAIvB,KAAKP,MAAM0B,MAAMK,OAArB,MAAgCxB,KAAKP,MAAM0B,MAAMM,MAAjD,UAEHzB,KAAK0B,sB,GA9BFb,IAAMC,YCkBXa,E,uKAhBD,IAAD,OACL,OACI,qBAAKnB,UAAU,YAAf,SACKR,KAAKP,MAAMmC,OAAOC,KAAI,SAAAV,GACrB,OAAO,cAAC,EAAD,CAAOA,MAAOA,EAEPD,MAAO,EAAKzB,MAAMyB,MAClBE,SAAU,EAAK3B,MAAM2B,SACrBC,UAAW,EAAK5B,MAAM4B,WAHjBF,EAAMW,a,GANnBjB,IAAMC,WCafiB,E,uKAXP,OACI,sBAAKvB,UAAU,gBAAf,UACI,yCACA,cAAC,EAAD,CAAWoB,OAAQ5B,KAAKP,MAAMuC,cAClBd,MAAOlB,KAAKP,MAAMyB,e,GANlBL,IAAMC,WCgCnBmB,G,wDA/BX,WAAYxC,GAAQ,IAAD,8BACf,cAAMA,IACDyC,iBAAmB,EAAKA,iBAAiBrC,KAAtB,gBAExB,EAAKH,MAAQ,CACTyC,WAAY,4BALD,E,6DASFjC,GACbF,KAAKP,MAAM2C,aAAalC,EAAEE,OAAOC,OACjCL,KAAKG,SAAU,CAAEgC,WAA+B,KAAnBjC,EAAEE,OAAOC,MAAe,0BAA4B,kB,+BAIjF,OACI,sBAAKG,UAAU,WAAf,UACI,uBAAOC,YAAY,qBACXC,KAAK,OACLC,SAAUX,KAAKkC,iBACfG,MAAO,CAAEC,gBAAiBtC,KAAKN,MAAMyC,cAC7C,cAAC,EAAD,CAAWP,OAAQ5B,KAAKP,MAAM8C,eAClBlB,WAAW,EACXD,SAAUpB,KAAKP,MAAM2B,WACjC,wBAAQZ,UAAU,gBACVc,QAAStB,KAAKP,MAAM+C,OAD5B,oC,GAzBO3B,IAAMC,YLAvB2B,EAAU,CAGZC,eAHY,WAIR,GAAInD,EACA,OAAOA,EAIX,IAAMoD,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAgB,CACpCzD,EAAcoD,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAIxC,OAFAJ,OAAOO,YAAW,kBAAM5D,EAAc,KAAgB,IAAZ0D,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxC9D,EAEP,IAAM+D,EAAS,2DAvBV,mCAuBU,0EAtBP,4CAuBRV,OAAOC,SAAWS,GAI1B1D,OAzBY,SAyBLD,GACH,IAAMJ,EAAckD,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmD5D,GAC/D,CACG6D,QAAS,CAACC,cAAc,UAAD,OAAYlE,MACnCmE,MAAK,SAAAC,GACI,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACR,OAAKA,EAAajC,OAGXiC,EAAajC,OAAOkC,MAAMjC,KAAI,SAAAV,GAAK,MAAK,CAC3CW,GAAIX,EAAMW,GACVP,KAAMJ,EAAMI,KACZC,OAAQL,EAAM4C,QAAQ,GAAGxC,KACzBE,MAAON,EAAMM,MAAMF,KACnByC,IAAK7C,EAAM6C,QAPJ,OAYvBC,aA9CY,SA8CC1C,EAAM2C,GACf,GAAK3C,GAAS2C,EAAUC,OAAxB,CAGA,IAEIC,EAFE7E,EAAckD,EAAQC,iBACtBc,EAAU,CAAEC,cAAc,UAAD,OAAYlE,IAE3C,OAAOgE,MAAM,gCAAiC,CAAEC,QAASA,IACpDE,MAAK,SAAAC,GACF,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GAEJ,OADAO,EAASP,EAAa/B,GACfyB,MAAM,oCAAD,OAAqCa,EAArC,cAAyD,CACjEZ,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEjD,KAAMA,MAC9BmC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,IAAMY,EAAaZ,EAAa/B,GAChC,OAAOyB,MAAM,oCAAD,OAAqCa,EAArC,sBAAyDK,EAAzD,WAA8E,CACtFjB,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEE,KAAOR,eAUvCzB,IM3EfA,EAAQC,iB,IA2EOiC,E,kDAxEb,WAAYlF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXsC,cAAe,GACf4C,aAAc,yBACdrC,eAAgB,IAElB,EAAKvB,SAAW,EAAKA,SAASnB,KAAd,gBAChB,EAAKoB,YAAc,EAAKA,YAAYpB,KAAjB,gBACnB,EAAKgF,mBAAqB,EAAKA,mBAAmBhF,KAAxB,gBAC1B,EAAKoE,aAAe,EAAKA,aAAapE,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAXG,E,qDAcVsB,GACP,IAAIS,EAAS5B,KAAKN,MAAM6C,eACxB,GAAIX,EAAOkD,MAAK,SAAAC,GAAU,OAAIA,EAAWjD,KAAOX,EAAMW,MACpD,OAAOX,EAEPS,EAAOoD,KAAK7D,GACZnB,KAAKG,SAAS,CAAEoC,eAAgBX,M,kCAGxBT,GACV,IAAIS,EAAS5B,KAAKN,MAAM6C,eACxBX,EAASA,EAAOqD,QAAO,SAAAC,GAAY,OAAIA,EAAapD,KAAOX,EAAMW,MACjE9B,KAAKG,SAAS,CAAEoC,eAAgBX,M,yCAGfL,GACjBvB,KAAKG,SAAS,CAAEyE,aAAcrD,M,qCAGhB,IAAD,OACP2C,EAAYlE,KAAKN,MAAM6C,eAAeV,KAAI,SAAAV,GAAK,OAAIA,EAAM6C,OAC/DvB,EAAQwB,aAAajE,KAAKN,MAAMkF,aAAcV,GAAWR,MAAK,WAC5D,EAAKvD,SAAS,CACZyE,aAAc,eACdrC,eAAiB,U,6BAKhB5C,GAAO,IAAD,OACX8C,EAAQ7C,OAAOD,GAAM+D,MAAK,SAAA1B,GACxB,EAAK7B,SAAS,CAAE6B,cAAeA,S,+BAOjC,OACE,gCACE,sCAAQ,sBAAMxB,UAAU,YAAhB,sBACR,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAWP,SAAUD,KAAKJ,SAC1B,sBAAKY,UAAU,eAAf,UACE,cAAC,EAAD,CAAewB,cAAehC,KAAKN,MAAMsC,cAAed,MAAOlB,KAAKgB,WACpE,cAAC,EAAD,CAAU4D,aAAc5E,KAAKN,MAAMkF,aACzBrC,eAAgBvC,KAAKN,MAAM6C,eAC3BnB,SAAUpB,KAAKiB,YACfmB,aAAcpC,KAAK6E,mBACnBrC,OAAQxC,KAAKiE,4B,GAhEjBpD,IAAMC,WCETqE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cef7956f.chunk.js","sourcesContent":["let accessToken;\r\nconst clientId = 'ac56ba30ffaa4b09bafbba71189cba70';\r\nconst redirectUri = 'https://lauradotcom.github.io/songcrush/';\r\n\r\nconst Spotify = {\r\n\r\n\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        } \r\n        \r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            //This clears the parameters, allowing us to grab a new access token when it expires.\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }   else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n        { \r\n           headers: {Authorization: `Bearer ${accessToken}`}\r\n        }).then(response => {\r\n                    return response.json();\r\n                }).then(jsonResponse => {\r\n                if (!jsonResponse.tracks) {\r\n                    return [];\r\n                } \r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }));\r\n            });\r\n    },\r\n    \r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers } )\r\n            .then(response => {\r\n                return response.json();\r\n            }).then(jsonResponse => {\r\n                userId = jsonResponse.id; \r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ name: name })\r\n                }).then(response => {\r\n                    return response.json();\r\n                }).then(jsonResponse => {\r\n                    const playlistId = jsonResponse.id;\r\n                    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({ uris : trackUris })\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n};\r\n\r\n\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState(\r\n            { term: e.target.value },\r\n            () => {\r\n                this.search();\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.charCode === 13) {\r\n            this.props.search(this.state.term);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\"\r\n                        type=\"text\"\r\n                        value={this.state.term}\r\n                        onChange={this.handleTermChange}\r\n                        onKeyPress={this.handleKeyPress}\r\n                         />\r\n                {/*<button className=\"SearchButton\"\r\n                        onClick={this.search}>\r\n        FIND SONG</button>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n    \r\n   removeTrack() {\r\n       this.props.onRemove(this.props.track);\r\n   }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval === true) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {this.props.tracks.map(track => {\r\n                  return <Track track={track} \r\n                                key={track.id} \r\n                                onAdd={this.props.onAdd} \r\n                                onRemove={this.props.onRemove} \r\n                                isRemoval={this.props.isRemoval} />;\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} \r\n                            onAdd={this.props.onAdd} \r\n                             />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n\r\n        this.state = {\r\n            background: 'rgba(255, 255, 255, 0.1)'\r\n        }\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.props.onNameChange(e.target.value);\r\n        this.setState( { background: e.target.value === '' ? 'rgba(255, 255, 255, 0.1' : 'transparent' } );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input placeholder=\"Name Your Playlist\"\r\n                        type=\"text\"\r\n                        onChange={this.handleNameChange}\r\n                        style={{ backgroundColor: this.state.background }} />\r\n                <TrackList tracks={this.props.playlistTracks} \r\n                            isRemoval={true}\r\n                            onRemove={this.props.onRemove} />\r\n                <button className=\"Playlist-save\"\r\n                        onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nSpotify.getAccessToken();\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      searchResults: [],\r\n      playlistName: 'New SongCrush Playlist',\r\n      playlistTracks: []\r\n    }; \r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\r\n      return track;\r\n    } else {\r\n      tracks.push(track);\r\n      this.setState({ playlistTracks: tracks })};\r\n  }\r\n\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({ playlistName: name });\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n      this.setState({ \r\n        playlistName: 'New Playlist', \r\n        playlistTracks : [] \r\n      })\r\n    })\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState({ searchResults: searchResults })\r\n    });\r\n  }\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Song<span className=\"highlight\">Crush</span></h1>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\">\r\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\r\n            <Playlist playlistName={this.state.playlistName} \r\n                      playlistTracks={this.state.playlistTracks} \r\n                      onRemove={this.removeTrack}\r\n                      onNameChange={this.updatePlaylistName}\r\n                      onSave={this.savePlaylist} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}